#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

- name: Setup common packages on Redhat based systems
  hosts: all
  connection: ssh
  become: true
  tasks:
    - name: Remove sysstat
      package:
        name:
          - sysstat
        state: absent
    - name: Install packages
      package:
        name: 
          - mdadm
          - xfsprogs
          - iotop
          - wget
          - sysstat
          - vim
          - chrony
          - git
          - gcc
          - tuned
        state: present
        update_cache: true
    - name: Install Java Redhat
      when: ansible_os_family == 'RedHat'
      package: 
        name: 
          - java-11
        state: present
    - name: Install Java on Debian
      when: ansible_os_family == 'Debian'
      package:
        name:
          - openjdk-11-jdk
        state: present

- name: set facts about drives
  hosts: redpanda
  tasks:
  - set_fact: 
      device_info: "{{ hostvars[inventory_hostname].ansible_devices }}"
      nvme_device_ids: "{{ hostvars[inventory_hostname].ansible_devices.keys() | map('regex_search', 'nvme.*') | select('string') | list }}" 
  - set_fact: 
      nvme_devices_for_raid: '{{ (nvme_devices_for_raid | default([])) + ["/dev/" + item] }}'
    loop: '{{ nvme_device_ids }}'
    when: device_info[item]["partitions"] | length == 0

- name: Format raid drives if more then 2 drives
  hosts: redpanda
  tasks:
  - block: 
    - name: define mdadm_arrays variable
      set_fact:
        mdadm_arrays:
        - name: md0
          devices: '{{ nvme_devices_for_raid }}'
          filesystem: xfs
          level: 0
          mountpoint: /mnt/vectorized
          state: present

    - name: run mdadm
      include_role: 
        name: mrlesmithjr.mdadm
    when: nvme_devices_for_raid|length > 1


- name: created a non raid disk
  hosts: redpanda
  tasks:
    - block: 
      - name: create xfs file system
        filesystem: 
          fstype: xfs
          dev: '{{ nvme_devices_for_raid[0] }}'
      - name: mount nvme device
        mount:
          path: /mnt/vectorized
          src: '{{ nvme_devices_for_raid[0] }}'
          fstype: xfs
          state: mounted 
      when: nvme_devices_for_raid|length == 1

- name: configure the data path
  hosts: redpanda
  tasks: 
  - name: data path
    file:
      path: /mnt/vectorized/redpanda
      state: directory
      owner: root
      group: root
      mode: ugo=rwx
  - name: set premissions
    file:
      dest: /var/lib/redpanda
      src: /mnt/vectorized/redpanda
      state: link
      owner: root
      group: root
      mode: ugo=rwx

- name: Store server lists
  hosts: all
  connection: ssh
  tags: client
  tasks:
    - set_fact:
        bootstrapServers: "{{ groups['redpanda'] | map('extract', hostvars, ['private_ip']) | map('regex_replace', '^(.*)$', '\\1:9092') | join(',') }}"

- name: install redpanda
  hosts: redpanda
  tasks:
    - name: add the redpanda yum repo
      when: ansible_os_family == 'RedHat'
      shell: |
        curl -1sLf 'https://packages.vectorized.io/nzc4ZYQK3WRGd9sy/redpanda/cfg/setup/bash.rpm.sh' | sudo -E bash
      args: 
        warn: no 
    - name: add the repanda apt repo
      when: ansible_os_family == 'Debian'
      shell: |
        curl -1sLf 'https://packages.vectorized.io/nzc4ZYQK3WRGd9sy/redpanda/cfg/setup/bash.deb.sh' | sudo -E bash
      args:
        warn: no
    - name: install redpanda
      package: 
        name: 
          - redpanda
        state: present
        update_cache: yes
    - name: set data dir file perms
      file:
        path: /var/lib/redpanda/data
        owner: redpanda
        group: redpanda

- hosts: redpanda
  tasks:
  - name: ensure /etc/redpanda exists
    file:
      path: /etc/redpanda
      state: directory

  - name: configure redpanda
    notify:
      - restart redpanda-tuner
      - restart redpanda
    vars:
      seed_private_ip: '{{ hostvars[groups["redpanda"][0]].private_ip }}'
    shell: |
      rpk config set cluster_id 'test'
      rpk config set organization 'vectorized.io'
      rpk config set redpanda.advertised_kafka_api '{
        address: {{ hostvars[inventory_hostname].private_ip }},
        port: 9092
      }' --format yaml
      rpk config set redpanda.advertised_rpc_api '{
        address: {{ hostvars[inventory_hostname].private_ip }},
        port: 33145
      }' --format yaml
      rpk mode production

      {% if hostvars[groups['redpanda'][0]].id == hostvars[inventory_hostname].id %}
      sudo rpk config bootstrap \
        --id {{ groups['redpanda'].index(inventory_hostname) }} \
        --self {{ hostvars[inventory_hostname].private_ip }}

      {% else %}

      sudo rpk config bootstrap \
        --id {{ groups['redpanda'].index(inventory_hostname) }} \
        --self {{ hostvars[inventory_hostname].private_ip }} \
        --ips {{ seed_private_ip }}
      {% endif %}

  handlers:
  - name: restart redpanda-tuner
    systemd:
      name: redpanda-tuner
      state: restarted
  - name: restart redpanda
    systemd:
      name: redpanda
      state: restarted

- name: Chrony setup
  hosts: client
  connection: ssh
  become: true
  tasks:
    - name: Set up chronyd
      template:
        src: "templates/chrony.conf"
        dest: "/etc/chrony.conf"
    - systemd:
        state: restarted
        daemon_reload: yes
        name: "chronyd"

- name: Setup Benchmark client
  hosts: client
  connection: ssh
  become: true
  tags: client
  tasks:
    - file: path=/opt/benchmark state=absent
    - name: Copy benchmark code
      unarchive:
        src: ../../package/target/openmessaging-benchmark-0.0.1-SNAPSHOT-bin.tar.gz
        dest: /opt
    - shell: mv /opt/openmessaging-benchmark-0.0.1-SNAPSHOT /opt/benchmark
    #- shell: tuned-adm profile latency-performance

    - name: Get list of driver config files
      raw: ls -1 /opt/benchmark/driver-redpanda/*.yaml
      register: drivers_list

    - name: Configure URL
      lineinfile:
        dest: "{{ item }}"
        regexp: "^  bootstrap.servers="
        line: "  bootstrap.servers={{ bootstrapServers }}"
      with_items: "{{ drivers_list.stdout_lines }}"
    - name: Configure memory
      lineinfile:
        dest: /opt/benchmark/bin/benchmark-worker
        regexp: "^JVM_MEM="
        line: 'JVM_MEM="-Xms2G -Xmx4G -XX:+UseG1GC -XX:MaxGCPauseMillis=10 -XX:+ParallelRefProcEnabled -XX:+UnlockExperimentalVMOptions -XX:+AggressiveOpts -XX:+DoEscapeAnalysis -XX:ParallelGCThreads=32 -XX:ConcGCThreads=32 -XX:G1NewSizePercent=50 -XX:+DisableExplicitGC -XX:-ResizePLAB -XX:+PerfDisableSharedMem -XX:+AlwaysPreTouch -XX:-UseBiasedLocking"'
    - name: Configure memory
      lineinfile:
        dest: /opt/benchmark/bin/benchmark
        regexp: "^JVM_MEM="
        line: 'JVM_MEM="-Xmx1G"'
    - name: Setup JMX for Producer/Consumer clients
      copy:
        src: "monitoring/jmx_exporter/jmx_prometheus_javaagent-0.13.0.jar"
        dest: "/opt/benchmark/jmx_prometheus_javaagent-0.13.0.jar"
    - name: Configure JMX for Prometheus (Client)
      template:
        src: "monitoring/jmx_exporter/client.yml"
        dest: "/opt/benchmark/metrics.yml"
    - template:
        src: "templates/workers.yaml"
        dest: "/opt/benchmark/workers.yaml"
    - name: Install benchmark systemd service
      template:
        src: "templates/benchmark-worker.service"
        dest: "/etc/systemd/system/benchmark-worker.service"
    - name: "Restart benchmark worker"
      tags:
        - configure
      systemd:
        state: restarted
        daemon_reload: yes
        name: "benchmark-worker"

- name: Hosts addresses
  hosts: localhost
  become: false
  tasks:
    - debug:
        msg: Redpanda nodes {{ item }}"
      with_items: "{{ groups['redpanda'] }}"
    - debug:
        msg: "Benchmark clients {{ item }}"
      with_items: "{{ groups['client'] }}"


# Install the monitoring stack
- name: Install Node Exporter
  hosts: redpanda, client
  roles:
  - cloudalchemy.node_exporter

- name: create a local tmp directory
  hosts: localhost
  become: false
  tasks:
    - name: create a local temp directory
      tempfile: 
        state: directory
        suffix: grafana
      register: grafana_temp_dir
    - name: register temp path with redpanda host
      set_fact: 
        grafana_dir: "{{ grafana_temp_dir.path }}"
      delegate_to: "{{ groups['redpanda'][0] }}"
      delegate_facts: True
    - name: register temp path with prometheus host
      set_fact: 
        grafana_dir: "{{ grafana_temp_dir.path }}"
      delegate_to: "{{ item }}"
      delegate_facts: True 
      with_items: "{{ groups['prometheus'] }}"

- hosts: redpanda[0]
  tasks:
  - name: generate the redpanda grafana dashboard
    shell: |
      rpk generate grafana-dashboard --datasource prometheus --prometheus-url 'http://{{hostvars[inventory_hostname].private_ip}}:9644/metrics' > '/tmp/redpanda-grafana.json'

  - name: fetch grafana dashboard
    fetch:
      src: /tmp/redpanda-grafana.json
      dest: "{{ grafana_dir }}/"
      flat: yes

- hosts: prometheus
  roles:
  - cloudalchemy.prometheus
  vars:
    prometheus_scrape_configs:
      - job_name: "redpanda"
        static_configs:
          - targets: "{{ groups['redpanda'] | map('extract', hostvars, ['ansible_default_ipv4','address']) | map('regex_replace', '^(.*)$','\\1:9644') | list  }}"
      - job_name: "node"
        static_configs:
          - targets: "{{ groups['redpanda'] | map('extract', hostvars, ['ansible_default_ipv4','address']) | map('regex_replace', '^(.*)$','\\1:9100') | list  }}"
          - targets: "{{ groups['client'] | map('extract', hostvars, ['ansible_default_ipv4','address']) | map('regex_replace', '^(.*)$','\\1:9100') | list  }}"
      - job_name: "client - jmx"
        static_configs:
          - targets: "{{ groups['client'] | map('extract', hostvars, ['ansible_default_ipv4', 'address']) | map('regex_replace', '^(.*)$', '\\1:9090') | list }}"

- hosts: prometheus
  roles: 
  - cloudalchemy.grafana
  vars:
    grafana_version: 6.7.3
    grafana_security:
      admin_user: admin
      admin_password: enter_your_secure_password
    grafana_datasources:
    - name: prometheus
      type: prometheus
      access: proxy
      url: 'http://localhost:9090'
      basicAuth: false
    grafana_dashboards_dir: '{{ grafana_dir }}'
    grafana_dashboards:
    - dashboard_id: 1860
      revision_id: 21
      datasource: prometheus
